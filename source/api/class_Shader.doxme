
class Shader
  シェーダ言語であるHLSLを使ってプログラムを記述し、画像の描画時にGPU上で実行することで高速なエフェクトを実現するクラスです。
  利便性向上のため、Shader::CoreクラスとShaderクラスに分かれており、Shader::CoreはHLSLを渡して実行バイナリを生成・保持するクラス、ShaderはHLSLに渡すパラメータを保持し描画時に指定するクラスですが、これらのクラスはDXRuby史上最大の拡張と言っても過言ではない、非常に強力なエフェクト機能を提供します。
  エフェクト処理はDirectX用にMicrosoftが開発したHLSLという言語での記述であり、HLSLを知らない方には大変高いハードルとなることは疑う余地がありません。
  どのようなことができるかは、Shader系サンプルを動かして見て頂くのが最も手っ取り早いでしょう（インストール時の絵が波打っているのもShaderを利用して作られています）。

  DXRuby1.2まではピクセル単位の処理はRubyで記述するしかなく、とてもリアルタイムで処理できるような速度にはなりませんでした。
  ShaderクラスはDirectX9のプログラマブルシェーダ機能をRuby側に解放することで、ピクセル単位の処理をGPU上で実行することができます。
  これにより今まで不可能だった自由なリアルタイムエフェクトを作成することができます。

  Shader単体でできることは限られますが、RenderTargetに対してShaderで描画し、それを画面に描画することで更にさまざまなことができるようになります。
  このあたりもShader系サンプルのコードを見て頂くとなんとなくわかるかと思います。

  HLSLは扱えない人にはまったく扱えないと思いますので、何かしらエフェクトを作成した場合はソースとサンプルを公開していただければ一層DXRubyの世界が広がるかと思います。
  具体的な使い方は[チュートリアル][tutorial_shader]を参照してください。
  
  @note Shaderはピクセルシェーダだけではなく、頂点シェーダも扱うことができます。
    ただし現在のDXRubyは3Dには非対応であるため、これを使って3D描画するにはいろいろときつい制限(Zバッファが使えない、カリングできない、頂点バッファが使えない、三角形のポリゴンが描画できないなど)が発生します。
    使えるとしてもちょっとした3Dエフェクトをする程度での利用にとどまるでしょう。
    頂点シェーダを使ってどの程度のことが可能かはこれまたサンプルに入っていますのでご覧になってください。
    本格的な3D描画に関しては過去DXRuby1.1開発版でテストしてボツった経緯がありますが、次のDXRuby1.5開発版で再びチャレンジする予定でいます(またボツるかもしれません)。
    3Dしたい人は開発版を利用してみて、使ってみた感想、意見などを頂ければより良いものになるかと思います。
  @see Shader::Core



  def self.new(core, technique_name=nil)
    Shaderオブジェクトを生成して返します。
    @param core Shader Shader::Coreオブジェクト
    @param technique_name String HLSL内にtechniqueが複数ある場合にどれを使うかを選択します。
      省略すると1つ目に定義されたtechniqueになります。
  
  
  def technique -> String
    technique名を返します。
  
  
  def technique=(name)
    technique名を変更します。
    @param name String technique名
  
  
  def setter/getter
    Shader::Coreクラスに定義したパラメータ名のSetter/Getterが特異メソッドとして自動で追加されます。
    これらのメソッドで設定されたパラメータの値が描画時にHLSLに渡されます。


  class Core
    HLSLから実行バイナリを生成・保持するクラスです。
    
    def self.new(hlsl, option={})
      hlslで指定されたHLSLプログラムのテキストをコンパイルし、バイナリを保持します。
      optionに指定されたパラメータをHLSLで受け取ることができます。
      実際に渡す値はShaderオブジェクトのsetter/getterで設定し、ここではパラメータ名と型のみを指定します。
      optionに設定する値はパラメータ名をキーに、型を値に持たせたHashオブジェクトとなります。
      どちらもシンボルで指定してください。
      型に使えるシンボルは以下の3つです。
      :int
      :float
      :texture
      HLSL側の変数の型と一致させてください。
      また、float4などのベクトル型の場合は:floatと指定して、パラメータに渡す値は同じ要素数の配列とします。
      @param hlsl String HLSLプログラム
      @param option Hash オプション
    
    
    def dispose
      HLSLプログラムのバイナリデータを解放します。
      dispose後、そのオブジェクトのメソッドを呼び出したり描画時に指定したりすると例外が発生します。


